## Challenge:  https://www.hackerrank.com/challenges/revising-the-select-query/problem

## Solution:

SELECT * FROM CITY
WHERE COUNTRYCODE = 'USA'
AND POPULATION > 100000;


## Challenge: https://www.hackerrank.com/challenges/revising-the-select-query-2/problem

## Solution:

select name 
from city
where countrycode = 'USA'
and population > 120000;


## Challenge: https://www.hackerrank.com/challenges/revising-the-select-query-2/problem

## Solution: 

SELECT *
FROM CITY


## Challenge: https://www.hackerrank.com/challenges/select-by-id/problem

## Solution:

SELECT *
FROM CITY
WHERE ID = 1661

## Challenge: https://www.hackerrank.com/challenges/japanese-cities-attributes/problem

## Solution: 

SELECT *
FROM CITY
WHERE COUNTRYCODE = 'JPN';

## Challenge: https://www.hackerrank.com/challenges/japanese-cities-name/problem

## Solution:

SELECT NAME
FROM CITY
WHERE COUNTRYCODE = 'JPN';

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-1/problem

## Solution: 

SELECT CITY, STATE
FROM STATION;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-2/problem

## Solution: 

SELECT ROUND(SUM(LAT_N),2),
    ROUND(SUM(LONG_W),2)
FROM STATION;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-3/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION
WHERE MOD(ID, 2) = 0;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-4/problem

## Solution: 

WITH cities AS(
    SELECT COUNT(CITY) AS 'num_cities',
        COUNT(DISTINCT(CITY)) AS 'num_distinct_cities'
    FROM STATION)
    
SELECT num_cities - num_distinct_cities
FROM cities;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-5/problem

## Solution: 

SELECT CITY,
    LENGTH(CITY) AS 'length'
FROM STATION
ORDER BY length, CITY
LIMIT 1;

SELECT CITY,
    LENGTH(CITY) AS 'length'
FROM STATION
ORDER BY length DESC, CITY
LIMIT 1;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-6/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION
WHERE CITY LIKE 'a%'
    OR CITY LIKE 'e%'
    OR CITY LIKE 'i%'
    OR CITY LIKE 'o%'
    OR CITY LIKE 'u%';

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-7/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION
WHERE CITY LIKE '%a'
    OR CITY LIKE '%e'
    OR CITY LIKE '%i'
    OR CITY LIKE '%o'
    OR CITY LIKE '%u';

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-8/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION
WHERE 
    (CITY LIKE 'a%'
        OR CITY LIKE 'e%'
        OR CITY LIKE 'i%'
        OR CITY LIKE 'o%'
        OR CITY LIKE 'u%')
AND
    (CITY LIKE '%a'
        OR CITY LIKE '%e'
        OR CITY LIKE '%i'
        OR CITY LIKE '%o'
        OR CITY LIKE '%u');

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-9/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT LIKE 'a%'
    AND CITY NOT LIKE 'e%'
    AND CITY NOT LIKE 'i%'
    AND CITY NOT LIKE 'o%'
    AND CITY NOT LIKE 'u%';

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-10/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT LIKE '%a'
    AND CITY NOT LIKE '%e'
    AND CITY NOT LIKE '%i'
    AND CITY NOT LIKE '%o'
    AND CITY NOT LIKE '%u';

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-11/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION 
WHERE 
    (CITY NOT LIKE 'a%'
     AND CITY NOT LIKE 'e%'
     AND CITY NOT LIKE 'i%'
     AND CITY NOT LIKE 'o%'
     AND CITY NOT LIKE 'u%')
OR
    (CITY NOT LIKE '%a'
    AND CITY NOT LIKE '%e'
    AND CITY NOT LIKE '%i'
    AND CITY NOT LIKE '%o'
    AND CITY NOT LIKE '%u');

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-12/problem

## Solution: 

SELECT DISTINCT CITY
FROM STATION
WHERE LEFT(CITY,1) NOT IN ('a','e','i','o','u')
AND RIGHT(CITY,1) NOT IN ('a','e','i','o','u');

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-13/problem

## Solution: 

SELECT ROUND(SUM(LAT_N),4)
FROM STATION
WHERE LAT_N BETWEEN 38.7880 AND 137.2345;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-14/problem

## Solution: 

SELECT ROUND(MAX(LAT_N),4)
FROM STATION
WHERE LAT_N < 137.2345;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-15/problem

## Solution: 

SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N < 137.2345
ORDER BY LAT_N DESC
LIMIT 1;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-16/problem

## Solution: 

SELECT ROUND(MIN(LAT_N),4)
FROM STATION
WHERE LAT_N > 38.7780;

## Challenge: https://www.hackerrank.com/challenges/weather-observation-station-17/problem

## Solution: 

SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N > 38.7780
ORDER BY LAT_N
LIMIT 1;

## Challenge: https://www.hackerrank.com/challenges/more-than-75-marks/problem

## Solution:

SELECT Name
FROM STUDENTS
WHERE Marks > 75
ORDER BY RIGHT(NAME,3), ID;

## Challenge: https://www.hackerrank.com/challenges/name-of-employees/problem

## Solution:

SELECT name
FROM Employee
ORDER BY name;

## Challenge: https://www.hackerrank.com/challenges/salary-of-employees/problem

## Solution:

SELECT name
FROM Employee
WHERE salary > 2000 AND months < 10
ORDER BY employee_id;

## Challenge: https://www.hackerrank.com/challenges/what-type-of-triangle/problem

## Solution:

ALTER TABLE TRIANGLES
ADD is_triangle INTEGER,
ADD isosceles INTEGER,
ADD equilateral INTEGER;

UPDATE TRIANGLES
SET is_triangle = 
CASE
    WHEN A < B+C AND B < A+C and C < A+B THEN 1
    ELSE 0
    END,
    isosceles = 
IF(A=B OR A=C OR B=C,1,0),
    equilateral =
IF(A=B AND A=C,1,0);


SELECT CASE
    WHEN is_triangle = 1 AND isosceles = 0 THEN 'Scalene'
    WHEN is_triangle = 1 AND isosceles = 1 AND equilateral = 0 THEN 'Isosceles'
    WHEN is_triangle = 1 AND equilateral = 1 THEN 'Equilateral'
    ELSE 'Not A Triangle'
    END
    FROM TRIANGLES;

## Challenge: https://www.hackerrank.com/challenges/revising-aggregations-the-count-function/problem

## Solution:

SELECT COUNT(*)
FROM CITY
WHERE POPULATION > 100000;

## Challenge: https://www.hackerrank.com/challenges/revising-aggregations-sum/problem

## Solution:

SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';

## Challenge: https://www.hackerrank.com/challenges/revising-aggregations-the-average-function/problem

## Solution:

SELECT AVG(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';

## Challenge: https://www.hackerrank.com/challenges/average-population/problem

## Solution: 

SELECT FLOOR(AVG(POPULATION))
FROM CITY;

## Challenge: https://www.hackerrank.com/challenges/japan-population/problem

## Solution:

SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = 'JPN';

## Challenge: https://www.hackerrank.com/challenges/population-density-difference/problem

## Solution:

SELECT MAX(POPULATION) - MIN(POPULATION)
FROM CITY;

## Challenge: https://www.hackerrank.com/challenges/the-blunder/problem

## Solution:

SELECT CEIL(AVG(Salary) - AVG(CONVERT(REPLACE(CONVERT(Salary,CHAR),'0',''),SIGNED)))
FROM EMPLOYEES;

## Challenge: https://www.hackerrank.com/challenges/earnings-of-employees/problem

## Solution:

SELECT salary*months AS 'earnings', COUNT(employee_id)
FROM Employee
GROUP BY earnings
ORDER BY earnings DESC
LIMIT 1;

## Challenge: https://www.hackerrank.com/challenges/asian-population/problem

## Solution:

SELECT SUM(CITY.POPULATION)
FROM CITY
JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE AND COUNTRY.CONTINENT = 'Asia';

## Challenge: https://www.hackerrank.com/challenges/african-cities/problem

## Solution:

SELECT CITY.NAME
FROM CITY
JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = 'Africa';

## Challenge: https://www.hackerrank.com/challenges/average-population-of-each-continent/problem

## Solution:

SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
FROM CITY
JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
GROUP BY COUNTRY.CONTINENT;

## Challenge: https://www.hackerrank.com/challenges/draw-the-triangle-1/problem

## Solution:

SELECT RPAD('*', 2*Level - 1, ' *')
FROM DUAL
CONNECT BY Level <=20
ORDER BY 1 DESC;

## Challenge: https://www.hackerrank.com/challenges/draw-the-triangle-2/problem

## Solution:

SELECT RPAD('*', 2*Level - 1, ' *') 
FROM DUAL
CONNECT BY Level <= 20
ORDER BY 1;





